<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/w/pqs-tls-measurements-80D5/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/w/pqs-tls-measurements-80D5/" rel="alternate" type="text/html" /><updated>2023-06-26T16:57:11+02:00</updated><id>http://localhost:4000/w/pqs-tls-measurements-80D5/feed.xml</id><title type="html">The Performance of Post-Quantum TLS1.3</title><subtitle>Quantum Computers (QCs) are fundamentally different from traditional computers and can efficiently solve mathemat- ical problems that are fundamental to the security of our current cryptographic algorithms. Although, current QCs must accommodate more qubits to break these cryptographic algorithms, the concern of “Store-Now-Decrypt-Later” (i.e., adversaries with adequate resources can store encrypted data today and decrypt them once powerful QCs become available) highlights the necessity to evaluate and adopt quantum-safe approaches as soon as possible. In this work, we investigated the performance impact of Post-Quantum Cryptography (PQC) on the TLS protocol. Different signa- ture algorithms and key agreements (as proposed by the National Institute of Standards and Technology (NIST)) are examined through black- and white-box measurements to get a precise handshake latency and the computational costs per participating library. Our results revealed that both pre- and post-quantum algorithms are CPU bound. However, HQC and Kyber are on-par with our current state-of-the-art while Dilithium and Falcon are even faster. We observed no perfor- mance drawback from using hybrid algorithms; moreover, on higher NIST security levels PQC outperforms any algorithm we use today. Hence, we can conclude that post-quantum TLS is suitable for today’s systems</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/w/pqs-tls-measurements-80D5/jekyll/update/2023/04/26/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-04-26T10:18:17+02:00</published><updated>2023-04-26T10:18:17+02:00</updated><id>http://localhost:4000/w/pqs-tls-measurements-80D5/jekyll/update/2023/04/26/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/w/pqs-tls-measurements-80D5/jekyll/update/2023/04/26/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>